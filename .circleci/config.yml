version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pip install poetry
            poetry config settings.virtualenvs.in-project true
            poetry install

      - run:
          name: run tests
          command: |
            mkdir -p test-reports/safety test-reports/mypy test-reports/pytest
            poetry run black --check
            poetry run safety check --json > test-reports/safety/results.json
            poetry run mypy spotr_server --junit-xml=test-reports/mypy/results.xml
            poetry run pytest --junitxml=test-reports/pytest/results.xml

      - store_test_results:
          path: test-reports

      - run:
          name: Uninstall Package
          command: poetry run pip uninstall opsgenie-logger -y

      - save_cache:
          paths:
            - ./.venv
          key: v1-dependencies-{{ checksum "poetry.lock" }}
          

  deploy:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pip install poetry
            poetry config settings.virtualenvs.in-project true
            poetry config repositories.triaxtec https://pypi.fury.io/triaxtec/
            poetry config http-basic.triaxtec $GEMFURY_PUSH_TOKEN $GEMFURY_PUSH_TOKEN
            poetry install

      - run:
          name: publish
          command: |
            poetry build -f wheel
            poetry publish -r triaxtec


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
